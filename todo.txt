PHASE 1 - Basic invitation creation
  * Does not include accounts (no login or signup)
  * Does not include data (account/invitation) persistance
Create wireframe of app - DONE
 * Design UX from page to page - DONE
   - Form entry page for each sample (has a save button) - DONE
   - Final page with form data filled in (has an edit & publish button) - DONE
     - The final page actually has the form, just the borders are gone. - DONE
   - Add the leading sample page once the samples are created - DONE
Get flask directory stucture setup - DONE
 * Create each mock page, with basic workflow working - DONE
 * Implement routes.py - DONE
 * Implement form templates w/ CSS
   * layout.html - contains header and form shells - DONE
     + header.html - implement the header (extends layout.html) - DONE
     + create edit_invite page (img files) with free from text input area
       - pass in correct image file to be edited - DONE
       - create invitation form - DONE
     + create publish_invite page - DONE
       - get form data from the edit_invite page into the publish_invite page - DONE
       - get edit button working, such that data is pushed back to edit_invite page - DONE
Add client-side javascript - DONE
 * Info button in popup - DONE
Implement the "save" button in the form page - DONE
 * Show doterra sample w/out the form (final presentation page)
Implement the "edit" button in the final page - DONE
 * Go back to the form page, with the form data filled in - DONE
 * Let user edit form, and then save again - DONE
Implement the "publish" button - REMOVED
 UPDATE: I did not know how to do this. Grabbing the screen is not allowed in
         web browsers. There is a tool called html2canvas.js that will try to
         scan the DOM and re-render the HTML into an HTML5 canvas element. The idea
         being that once the canvas is built, then an image of the canvas can be made,
         and then allowing the image to be sent to the user. But alas, the tool just
         couldn't handle all of the bootstrap and various details in the HTML/DOM. This
         is a difficult job, and is really just re-creating what the browser does
         (render HTML markup into a web page), except html2canvas is trying to render
         into a canvas element. There is no way this would ever be accomplished without
         formal standards and implementation by browsers.
 * Grab the doterra sample from the screen into an image - NOT DONE
 * Emails the final page to the user (from javascript on the client, not the * server) - NOT DONE
   - Look at Flask Mega-Tutorial lesson called "Email Support" and use Flask-Mail - NOT DONE

### Show Charlie, and see if I should go ahead and make this my MVP project.
  - if not, then get started on the code snippet project.
  - come back later and implement PHASE 2 for Pam

PHASE 2 - Accounts and data persistance
Create wireframe showing initial page, signup/login process
Create signup page
  * create signup form
  * persist user account
    - when data is added, automatically log them in
    - if account already exists, just say so in signup form
    - be able to send hashed password
Create "account" page
  * create account form
  * allow account info to be changed
  * allow administration control (disable accounts, disable account creation
    by users - only allow signup by admin, only supply account login/changes)
Create login page
  * create login form
  * get user data from database, and compare passwords, and if they compare, log them in
  * if they don't exist, just say so in signup form
  * add "forgot password" link
    - create "forgot password" popup and send link to change account password

PHASE 3
  * be able to use Flask-WTF forms, which are more secure


### Architecture

# Index page
layout.html
  - index.html
    - contains <a> refs to edit_{{sample}} - e.g. edit_invite1.html

# Edit page
layout.html
  - sample.html
    - {{sample}}.html --> e.g.: invite1.html

# Publish page
  - sample.html
    - {{sample}} --> e.g.: invite1.html


### How to add an invitation.
Easiest to clone a previous invitation
1) copy templates/invite3.html templates/invite?.html
   copy static/css/invite3.less static/css/invite?.less

2) include the new static/css/invite?.less in static/css/main.less

3) Edit the templates/invite?.html:
   - Update the form to have the correct input elements
   - Position the form on the page correctly
   - other CSS fine tuning (color, font, size, etc.)
